// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fun_of_replicates2
List fun_of_replicates2(List data, std::string fun);
RcppExport SEXP _smooth_commutability_fun_of_replicates2(SEXP dataSEXP, SEXP funSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    rcpp_result_gen = Rcpp::wrap(fun_of_replicates2(data, fun));
    return rcpp_result_gen;
END_RCPP
}
// obtain_df_max
double obtain_df_max(NumericVector df, NumericVector second_deriv, double threshold);
RcppExport SEXP _smooth_commutability_obtain_df_max(SEXP dfSEXP, SEXP second_derivSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type second_deriv(second_derivSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(obtain_df_max(df, second_deriv, threshold));
    return rcpp_result_gen;
END_RCPP
}
// reconstruct_4_band_matrix
NumericMatrix reconstruct_4_band_matrix(NumericVector x);
RcppExport SEXP _smooth_commutability_reconstruct_4_band_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstruct_4_band_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// get_matrices
List get_matrices(List auxM);
RcppExport SEXP _smooth_commutability_get_matrices(SEXP auxMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type auxM(auxMSEXP);
    rcpp_result_gen = Rcpp::wrap(get_matrices(auxM));
    return rcpp_result_gen;
END_RCPP
}
// global_precision_estimates2
List global_precision_estimates2(List data);
RcppExport SEXP _smooth_commutability_global_precision_estimates2(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(global_precision_estimates2(data));
    return rcpp_result_gen;
END_RCPP
}
// resample_samples2
List resample_samples2(List data);
RcppExport SEXP _smooth_commutability_resample_samples2(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_samples2(data));
    return rcpp_result_gen;
END_RCPP
}
// resample_fun_samples2
List resample_fun_samples2(List data, List weight_data);
RcppExport SEXP _smooth_commutability_resample_fun_samples2(SEXP dataSEXP, SEXP weight_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type weight_data(weight_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_fun_samples2(data, weight_data));
    return rcpp_result_gen;
END_RCPP
}
// resample_fun_samples2_all
List resample_fun_samples2_all(List data, List weight_data);
RcppExport SEXP _smooth_commutability_resample_fun_samples2_all(SEXP dataSEXP, SEXP weight_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type weight_data(weight_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_fun_samples2_all(data, weight_data));
    return rcpp_result_gen;
END_RCPP
}
// resample_imprecision2
List resample_imprecision2(List data);
RcppExport SEXP _smooth_commutability_resample_imprecision2(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_imprecision2(data));
    return rcpp_result_gen;
END_RCPP
}
// simulate_eqa_data2
List simulate_eqa_data2(List parameters, int type, bool AR, bool include_parameters, bool shift);
RcppExport SEXP _smooth_commutability_simulate_eqa_data2(SEXP parametersSEXP, SEXP typeSEXP, SEXP ARSEXP, SEXP include_parametersSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type AR(ARSEXP);
    Rcpp::traits::input_parameter< bool >::type include_parameters(include_parametersSEXP);
    Rcpp::traits::input_parameter< bool >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_eqa_data2(parameters, type, AR, include_parameters, shift));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_smooth_commutability_fun_of_replicates2", (DL_FUNC) &_smooth_commutability_fun_of_replicates2, 2},
    {"_smooth_commutability_obtain_df_max", (DL_FUNC) &_smooth_commutability_obtain_df_max, 3},
    {"_smooth_commutability_reconstruct_4_band_matrix", (DL_FUNC) &_smooth_commutability_reconstruct_4_band_matrix, 1},
    {"_smooth_commutability_get_matrices", (DL_FUNC) &_smooth_commutability_get_matrices, 1},
    {"_smooth_commutability_global_precision_estimates2", (DL_FUNC) &_smooth_commutability_global_precision_estimates2, 1},
    {"_smooth_commutability_resample_samples2", (DL_FUNC) &_smooth_commutability_resample_samples2, 1},
    {"_smooth_commutability_resample_fun_samples2", (DL_FUNC) &_smooth_commutability_resample_fun_samples2, 2},
    {"_smooth_commutability_resample_fun_samples2_all", (DL_FUNC) &_smooth_commutability_resample_fun_samples2_all, 2},
    {"_smooth_commutability_resample_imprecision2", (DL_FUNC) &_smooth_commutability_resample_imprecision2, 1},
    {"_smooth_commutability_simulate_eqa_data2", (DL_FUNC) &_smooth_commutability_simulate_eqa_data2, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_smooth_commutability(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
