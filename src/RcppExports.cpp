// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calculate_r
double calculate_r(const arma::mat& BTB, const arma::mat& Omega);
RcppExport SEXP _smooth_commutability_calculate_r(SEXP BTBSEXP, SEXP OmegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type BTB(BTBSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_r(BTB, Omega));
    return rcpp_result_gen;
END_RCPP
}
// calculate_Q
arma::mat calculate_Q(double lambda, const arma::mat& BTB, const arma::mat& Omega);
RcppExport SEXP _smooth_commutability_calculate_Q(SEXP lambdaSEXP, SEXP BTBSEXP, SEXP OmegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type BTB(BTBSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_Q(lambda, BTB, Omega));
    return rcpp_result_gen;
END_RCPP
}
// calculate_S
arma::mat calculate_S(double lambda, const arma::vec& weights, const arma::mat& B, const arma::mat& BTB, const arma::mat& Omega);
RcppExport SEXP _smooth_commutability_calculate_S(SEXP lambdaSEXP, SEXP weightsSEXP, SEXP BSEXP, SEXP BTBSEXP, SEXP OmegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type BTB(BTBSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_S(lambda, weights, B, BTB, Omega));
    return rcpp_result_gen;
END_RCPP
}
// calculate_S2
arma::mat calculate_S2(const arma::vec& weights, const arma::mat& B, const arma::mat& Q);
RcppExport SEXP _smooth_commutability_calculate_S2(SEXP weightsSEXP, SEXP BSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_S2(weights, B, Q));
    return rcpp_result_gen;
END_RCPP
}
// calculate_cov_beta
arma::mat calculate_cov_beta(const arma::mat& BTB, const arma::mat& Q);
RcppExport SEXP _smooth_commutability_calculate_cov_beta(SEXP BTBSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type BTB(BTBSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_cov_beta(BTB, Q));
    return rcpp_result_gen;
END_RCPP
}
// calculate_pred_var
arma::vec calculate_pred_var(const arma::mat& B_new, const arma::mat& cov_beta);
RcppExport SEXP _smooth_commutability_calculate_pred_var(SEXP B_newSEXP, SEXP cov_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type B_new(B_newSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type cov_beta(cov_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_pred_var(B_new, cov_beta));
    return rcpp_result_gen;
END_RCPP
}
// calculate_df
double calculate_df(double lambda, const arma::vec& weights, const arma::mat& B, const arma::mat& BTB, const arma::mat& Omega);
RcppExport SEXP _smooth_commutability_calculate_df(SEXP lambdaSEXP, SEXP weightsSEXP, SEXP BSEXP, SEXP BTBSEXP, SEXP OmegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type BTB(BTBSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_df(lambda, weights, B, BTB, Omega));
    return rcpp_result_gen;
END_RCPP
}
// numerical_gradient
double numerical_gradient(double x, const Function f, double eps, int r);
RcppExport SEXP _smooth_commutability_numerical_gradient(SEXP xSEXP, SEXP fSEXP, SEXP epsSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(numerical_gradient(x, f, eps, r));
    return rcpp_result_gen;
END_RCPP
}
// brent_min
double brent_min(Function f, double a, double b, double tol, int max_iter);
RcppExport SEXP _smooth_commutability_brent_min(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(brent_min(f, a, b, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// first_min
double first_min(Function f, double a, double b, double tol, double step_init, int max_iter);
RcppExport SEXP _smooth_commutability_first_min(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP tolSEXP, SEXP step_initSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type step_init(step_initSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(first_min(f, a, b, tol, step_init, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// error_df2
double error_df2(double sp, double df, const arma::vec& weights, const arma::mat& B, const arma::mat& BTB, const arma::mat& Omega, double r);
RcppExport SEXP _smooth_commutability_error_df2(SEXP spSEXP, SEXP dfSEXP, SEXP weightsSEXP, SEXP BSEXP, SEXP BTBSEXP, SEXP OmegaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sp(spSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type BTB(BTBSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(error_df2(sp, df, weights, B, BTB, Omega, r));
    return rcpp_result_gen;
END_RCPP
}
// fun_of_replicates2
List fun_of_replicates2(List data, std::string fun);
RcppExport SEXP _smooth_commutability_fun_of_replicates2(SEXP dataSEXP, SEXP funSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    rcpp_result_gen = Rcpp::wrap(fun_of_replicates2(data, fun));
    return rcpp_result_gen;
END_RCPP
}
// inside_deming2
IntegerVector inside_deming2(const List& data, const List& new_data, const List& imprecision_estimates, const int R, const double R_ratio, const double level);
RcppExport SEXP _smooth_commutability_inside_deming2(SEXP dataSEXP, SEXP new_dataSEXP, SEXP imprecision_estimatesSEXP, SEXP RSEXP, SEXP R_ratioSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List& >::type new_data(new_dataSEXP);
    Rcpp::traits::input_parameter< const List& >::type imprecision_estimates(imprecision_estimatesSEXP);
    Rcpp::traits::input_parameter< const int >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type R_ratio(R_ratioSEXP);
    Rcpp::traits::input_parameter< const double >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(inside_deming2(data, new_data, imprecision_estimates, R, R_ratio, level));
    return rcpp_result_gen;
END_RCPP
}
// sigma_h_squared_deming2
double sigma_h_squared_deming2(const List& data, const double lambda);
RcppExport SEXP _smooth_commutability_sigma_h_squared_deming2(SEXP dataSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(sigma_h_squared_deming2(data, lambda));
    return rcpp_result_gen;
END_RCPP
}
// local_average
NumericVector local_average(NumericVector x, NumericVector weights, int window);
RcppExport SEXP _smooth_commutability_local_average(SEXP xSEXP, SEXP weightsSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(local_average(x, weights, window));
    return rcpp_result_gen;
END_RCPP
}
// nfold_cv2
double nfold_cv2(double sp, const arma::vec& y, const arma::vec& weights, const arma::mat& B, const arma::mat& BTB, const arma::mat& Omega, bool cross_validation, double r);
RcppExport SEXP _smooth_commutability_nfold_cv2(SEXP spSEXP, SEXP ySEXP, SEXP weightsSEXP, SEXP BSEXP, SEXP BTBSEXP, SEXP OmegaSEXP, SEXP cross_validationSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sp(spSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type BTB(BTBSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< bool >::type cross_validation(cross_validationSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(nfold_cv2(sp, y, weights, B, BTB, Omega, cross_validation, r));
    return rcpp_result_gen;
END_RCPP
}
// gcv2
double gcv2(double sp, const arma::vec& y, const arma::vec& weights, const arma::mat& B, const arma::mat& BTB, const arma::mat& Omega, bool cross_validation, double r, double smudge);
RcppExport SEXP _smooth_commutability_gcv2(SEXP spSEXP, SEXP ySEXP, SEXP weightsSEXP, SEXP BSEXP, SEXP BTBSEXP, SEXP OmegaSEXP, SEXP cross_validationSEXP, SEXP rSEXP, SEXP smudgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sp(spSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type BTB(BTBSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< bool >::type cross_validation(cross_validationSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type smudge(smudgeSEXP);
    rcpp_result_gen = Rcpp::wrap(gcv2(sp, y, weights, B, BTB, Omega, cross_validation, r, smudge));
    return rcpp_result_gen;
END_RCPP
}
// obtain_df_max
double obtain_df_max(NumericVector df, NumericVector second_deriv, double threshold);
RcppExport SEXP _smooth_commutability_obtain_df_max(SEXP dfSEXP, SEXP second_derivSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type second_deriv(second_derivSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(obtain_df_max(df, second_deriv, threshold));
    return rcpp_result_gen;
END_RCPP
}
// reconstruct_4_band_matrix
NumericMatrix reconstruct_4_band_matrix(NumericVector x);
RcppExport SEXP _smooth_commutability_reconstruct_4_band_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstruct_4_band_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// get_matrices
List get_matrices(List auxM);
RcppExport SEXP _smooth_commutability_get_matrices(SEXP auxMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type auxM(auxMSEXP);
    rcpp_result_gen = Rcpp::wrap(get_matrices(auxM));
    return rcpp_result_gen;
END_RCPP
}
// global_precision_estimates2
List global_precision_estimates2(List data);
RcppExport SEXP _smooth_commutability_global_precision_estimates2(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(global_precision_estimates2(data));
    return rcpp_result_gen;
END_RCPP
}
// resample_samples2
List resample_samples2(List data);
RcppExport SEXP _smooth_commutability_resample_samples2(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_samples2(data));
    return rcpp_result_gen;
END_RCPP
}
// resample_fun_of_samples
List resample_fun_of_samples(List data);
RcppExport SEXP _smooth_commutability_resample_fun_of_samples(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_fun_of_samples(data));
    return rcpp_result_gen;
END_RCPP
}
// resample_fun_of_samples_all
List resample_fun_of_samples_all(List data);
RcppExport SEXP _smooth_commutability_resample_fun_of_samples_all(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_fun_of_samples_all(data));
    return rcpp_result_gen;
END_RCPP
}
// resample_imprecision
List resample_imprecision(List data);
RcppExport SEXP _smooth_commutability_resample_imprecision(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_imprecision(data));
    return rcpp_result_gen;
END_RCPP
}
// simulate_eqa_data2
List simulate_eqa_data2(List parameters, int type, bool AR, bool include_parameters, bool shift);
RcppExport SEXP _smooth_commutability_simulate_eqa_data2(SEXP parametersSEXP, SEXP typeSEXP, SEXP ARSEXP, SEXP include_parametersSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type AR(ARSEXP);
    Rcpp::traits::input_parameter< bool >::type include_parameters(include_parametersSEXP);
    Rcpp::traits::input_parameter< bool >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_eqa_data2(parameters, type, AR, include_parameters, shift));
    return rcpp_result_gen;
END_RCPP
}
// skewness
double skewness(NumericVector x, bool na_rm);
RcppExport SEXP _smooth_commutability_skewness(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(skewness(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// kurtosis
double kurtosis(NumericVector x, bool na_rm);
RcppExport SEXP _smooth_commutability_kurtosis(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(kurtosis(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_smooth_commutability_calculate_r", (DL_FUNC) &_smooth_commutability_calculate_r, 2},
    {"_smooth_commutability_calculate_Q", (DL_FUNC) &_smooth_commutability_calculate_Q, 3},
    {"_smooth_commutability_calculate_S", (DL_FUNC) &_smooth_commutability_calculate_S, 5},
    {"_smooth_commutability_calculate_S2", (DL_FUNC) &_smooth_commutability_calculate_S2, 3},
    {"_smooth_commutability_calculate_cov_beta", (DL_FUNC) &_smooth_commutability_calculate_cov_beta, 2},
    {"_smooth_commutability_calculate_pred_var", (DL_FUNC) &_smooth_commutability_calculate_pred_var, 2},
    {"_smooth_commutability_calculate_df", (DL_FUNC) &_smooth_commutability_calculate_df, 5},
    {"_smooth_commutability_numerical_gradient", (DL_FUNC) &_smooth_commutability_numerical_gradient, 4},
    {"_smooth_commutability_brent_min", (DL_FUNC) &_smooth_commutability_brent_min, 5},
    {"_smooth_commutability_first_min", (DL_FUNC) &_smooth_commutability_first_min, 6},
    {"_smooth_commutability_error_df2", (DL_FUNC) &_smooth_commutability_error_df2, 7},
    {"_smooth_commutability_fun_of_replicates2", (DL_FUNC) &_smooth_commutability_fun_of_replicates2, 2},
    {"_smooth_commutability_inside_deming2", (DL_FUNC) &_smooth_commutability_inside_deming2, 6},
    {"_smooth_commutability_sigma_h_squared_deming2", (DL_FUNC) &_smooth_commutability_sigma_h_squared_deming2, 2},
    {"_smooth_commutability_local_average", (DL_FUNC) &_smooth_commutability_local_average, 3},
    {"_smooth_commutability_nfold_cv2", (DL_FUNC) &_smooth_commutability_nfold_cv2, 8},
    {"_smooth_commutability_gcv2", (DL_FUNC) &_smooth_commutability_gcv2, 9},
    {"_smooth_commutability_obtain_df_max", (DL_FUNC) &_smooth_commutability_obtain_df_max, 3},
    {"_smooth_commutability_reconstruct_4_band_matrix", (DL_FUNC) &_smooth_commutability_reconstruct_4_band_matrix, 1},
    {"_smooth_commutability_get_matrices", (DL_FUNC) &_smooth_commutability_get_matrices, 1},
    {"_smooth_commutability_global_precision_estimates2", (DL_FUNC) &_smooth_commutability_global_precision_estimates2, 1},
    {"_smooth_commutability_resample_samples2", (DL_FUNC) &_smooth_commutability_resample_samples2, 1},
    {"_smooth_commutability_resample_fun_of_samples", (DL_FUNC) &_smooth_commutability_resample_fun_of_samples, 1},
    {"_smooth_commutability_resample_fun_of_samples_all", (DL_FUNC) &_smooth_commutability_resample_fun_of_samples_all, 1},
    {"_smooth_commutability_resample_imprecision", (DL_FUNC) &_smooth_commutability_resample_imprecision, 1},
    {"_smooth_commutability_simulate_eqa_data2", (DL_FUNC) &_smooth_commutability_simulate_eqa_data2, 5},
    {"_smooth_commutability_skewness", (DL_FUNC) &_smooth_commutability_skewness, 2},
    {"_smooth_commutability_kurtosis", (DL_FUNC) &_smooth_commutability_kurtosis, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_smooth_commutability(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
